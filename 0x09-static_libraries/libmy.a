!<arch>
0-isupper.c/    0           0     0     644     239       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
*_isupper-checks for uppercase character
*@c:character checeked
*Return:0succes
**/
int _isupper(int c)
{
	if (c > 64 && c < 91)
	{
		return (1);
	}
	else
	{
		return (0);
	};
}

0-memset.c/     0           0     0     644     390       `
#include "main.h"
#include <string.h>

/**
 *  *_memset- fills memory with a constant byte
 *   *@s:pointer to memory place
 *    *@b: constant byte
 *     *@n: the first byte
 *      *Return: a pointer to the memory area a
 *       **/
char *_memset(char *s, char b, unsigned int n)
{
		int ptr;

			for (ptr = 0; n > 0; ptr++, n--)
					{
								s[ptr] = b;
									}
				return (s);
}
0-strcat.c/     0           0     0     644     698       `
#include "main.h"
#include <string.h>
/**
 *  * _strcat- appends the 2nd string to the 1st string
 *   * @dest: string to append to
 *    * @src: string appended
 *     * Return:pointer to the resulting string dest
 *      **/
char *_strcat(char *dest, char *src)
{
		
		int nullindex, srcindex;
			int destlen = strlen(dest);

				for (nullindex = 0; nullindex < destlen; nullindex++)
						{
									if (dest[nullindex]  == '\0') 
												{
																for (srcindex = 0;src[srcindex]; srcindex++)
																				{
																									dest[nullindex++] = src[srcindex];	
																												}
																		}
										}
					return (dest);
						_putchar('\n');
}
100-atoi.c/     0           0     0     644     200       `
#include "main.h"
/**
 *  *_islower-check user input
 *   *Description:this function checks user input
 *    *@c:input
 *     *Return:0iflowerchar
 *      *1ifupper
 *       **/
int _atoi(char *s)
{}
1-isdigit.c/    0           0     0     644     278       `
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
/**
 * *_isdigit-checks for a digit
 * *@c:integer to be checked
 * *Return:0succes
 * **/
int _isdigit(int c)
{
		if (c > 47 && c < 58)
				{
							return (1);
								}
			else
					{
								return (0);
									};
}
1-memcpy.c/     0           0     0     644     492       `
#include "main.h"
#include <string.h>
/**
 *  * _memcpy - copies memory area
 *   * @dest : memory set to paste
 *    * @n : number of bytes
 *     * @src : memory area to copy from
 *      * Return: pointer to dest
 *       **/
char *_memcpy(char *dest, char *src, unsigned int n)
{
		/* memcpy ( from location buffer 0+50, from buffer2 , take 10 places)*/
		unsigned int i;

			i = 0;
				while (i < n)
						{
									dest[i] = src[i];
											i++;
												}
					return (dest);
}
1-strncat.c/    0           0     0     644     616       `
#include "main.h"
#include <string.h>
/**
 *  * _strncat-append two strings
 *   * @dest: first string
 *    * @src: second string to be appended
 *     * @n: size of src string
 *      * @Return: pointer to the resulting string
 *       **/
char *_strncat(char *dest, char *src, int n)
{
		int destlen = strlen(dest);
			int i,x;

				for (x = 0; x < destlen; x++)
						{
								if (dest[x] == '\0')
										{
												for (i = 0; i <= n && src[i] != '\0'; i++)
														{
																	dest[x + i] = src[n-1];
																			
																		}
													};
									}
					return dest;
}		
2-strchr.c/     0           0     0     644     634       `
#include "main.h"
#include <string.h>
/**
 *  * _strchr- locates a character in a string
 *   * @s: string to searh
 *    * @c: character to search for
 *     * Return: a pointer to first occurance of the character
 *      **/
char *_strchr(char *s, char c)
{
		unsigned int i;

			while (*s != '\0')
					{
								for (i = 0; i < strlen(s); i++)
											{
															if (s[i] == c)
																		{
																						return (s + i);
																								}
																	else
																				{
																								continue;
																										}
																			}
									}
				return (NULL);
}
2-strlen.c/     0           0     0     644     254       `
#include "main.h"
/**
 *  * _strlen-returns the length of a astring
 *   * @s:string input
 *    * Return:string length
 *     **/
int _strlen(char *s)
{
		int count = 0;

			while (*s++ != '\0')
					{
								count++;
									};
				return (count);
}
2-strncpy.c/    0           0     0     644     557       `
#include "main.h"
#include <string.h>
/**
 *  *_strncpy-copies a string
 *   *@dest: string copied
 *    *@src:string to be copied
 *     *@n:size of src string
 *      *Return: pointer to the resulting string
 *       */
char *_strncpy(char *dest, char *src, int n)
{
		int i;

			for (i = 0; i < n; i++)
					{
								if (src[i] == '\0')
											{
														       	dest[i] = '\0';
																		break;
																				}
										else
													{
																dest[i] = src[i];
																		};
											};
				return dest;
}

3-islower.c/    0           0     0     644     270       `
#include "main.h"
/**
 *  *_islower-check user input
 *   *Description:this function checks user input
 *    *@c:input
 *     *Return:0iflowerchar
 *      *1ifupper
 *       **/
int _islower(int c)
{
		if (c > 97 && c < 122)
					return (1);
			else
						return (0);
}
3-puts.c/       0           0     0     644     241       `
#include "main.h"
/**
 *  * _puts-prints a string followed by new line
 *   * @str:strring to be printed
 *    **/
void _puts(char *str)
{
		while (*str != '\0')
				{
							_putchar(*str);
									str++;
										};
			_putchar('\n');
}

3-strcmp.c/     0           0     0     644     747       `
#include "main.h"
#include <string.h>
/**
 *  * _strcmp- compares two strings
 *   * @s1: first string
 *    * @s2: second string
 *     * Return:0 if strings are identical
 *      **/
int _strcmp(char *s1, char *s2)
{
		int diff, i;
			int lens1 = strlen(s1);

				for (i = 0; i < lens1 - 1; i++)
						{
									if (s1[i] == s2[i])
												{
																diff = 0;
																			continue;
																					}
											else if (s1[i] > s2[i])
														{
																		diff = s1[i] - s2[i];
																					break;
																							}
													else
																{
																				diff = -(s2[i] - s1[i]);
																							break;
																									}
														}
					return (diff);
}

3-strspn.c/     0           0     0     644     578       `
#include "main.h"
#include <string.h>

/**
 *  * _strspn- gets the length of a prefix substring
 *   * @s:string to search
 *    * @accept: required prefix
 *     * Return: number of bytes in initial segment
 *      **/
unsigned int _strspn(char *s, char *accept)
{
		int i = 0, x = 0;


			while (*s != '\0')	/**increment pointer**/
					{
								while (*accept != '\0')
											{
															if (s[i] == accept[x])
																			return (i + 1);
																		else
																						i++;
																				}
										x++;
											}
				return (i);
}

4-isalpha.c/    0           0     0     644     327       `
#include "main.h"
/**
 *  *_isalpha-check user input
 *   *@c:user input to check
 *    *Return:1if input is char
 *     **/
int _isalpha(int c)
{
		if (c > 65 && c < 90)
				{
							return (1);
								}
			else if (c > 97 && c < 122)
					{
								return (1);
									}
				else
						{
									return (0);
										}
}

4-strpbrk.c/    0           0     0     644     476       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 *  * _strpbrk- searches string for any set of bytes
 *   * @s:string searched
 *    * @accept: string we search for
 *     **/
char *_strpbrk(char *s, char *accept)
{
		unsigned int i;
			
			for(i = 0; i < strlen(s); i++)
					{
								if(s[i] == accept[i])
											{	
															printf("%d\n",s[i]);
																		break;
																				}
									}
				printf("%s\n",accept);
					return(0);
}

5-strstr.c/     0           0     0     644     616       `
#include "main.h"
#include <string.h>
/**
 *  * _strstr- locates a substring
 *   * @haystack:string to be searched
 *    * @needle: substring to be located
 *     * Return: pointer to the beginning of the substring
 *      **/
char *_strstr(char *haystack, char *needle)
{
		int i = 0, x = 0;

			while (*needle != '\0')
					{
								while (*haystack != '\0')
											{
															if (haystack[i] == needle[x])
																			return (needle + x);
																		else
																						i++;
																					continue;
																							}
										x++;
											}
				return (NULL);
}
6-abs.c/        0           0     0     644     319       `
#include "main.h"
/**
 *  * _abs-compute the absloute value of integer
 *   * @x:user input
 *    * Return:absloute value of input
 *     **/
int _abs(int x)
{
		int z = x % 10;

			if(x > 0)
					{	
								return (z);
									}
				else if (x < 0)
						{
									z= z * -1;
											return (z);
												};
}

9-strcpy.c/     0           0     0     644     609       `
#include "main.h"
#include <string.h>
/**
 *  * _strcpy- copies string in src to dest
 *   * @dest:place to copy string
 *    * @src: string to be copied
 *     * Return:pointer to dest
 *      **/
char *_strcpy(char *dest, char *src)
{
		int i, x;
			int src_len = strlen(src);
				int dest_len = strlen(dest);

					while (*dest++)
							{
										for (i = 0; i < src_len + 1; i++)
													{
																	for (x = 0; x < dest_len + 1; x++)
																					{
																										dest[x] = src[i];
																													}
																			}
											}
						return (dest);
}

main.c/         0           0     0     644     715       `
#include "main.h"
int main()
{
	int _putchar(char c);
	int _islower(int c);
	int _isalpha(int c);
	int _abs(int n);
	int _isupper(int c);
	int _isdigit(int c);
	int _strlen(char *s);
	void _puts(char *s);
	char *_strcpy(char *dest, char *src);
	int _atoi(char *s);
	char *_strcat(char *dest, char *src);
	char *_strncat(char *dest, char *src, int n);
	char *_strncpy(char *dest, char *src, int n);
	int _strcmp(char *s1, char *s2);
	char *_memset(char *s, char b, unsigned int n);
	char *_memcpy(char *dest, char *src, unsigned int n);
	char *_strchr(char *s, char c);
	unsigned int _strspn(char *s, char *accept);
	char *_strpbrk(char *s, char *accept);
	char *_strstr(char *haystack, char *needle);
	return(0);
}

_putchar.c/     0           0     0     644     299       `
#include <unistd.h>
#include "main.h"

/**
 *  * _putchar - writes the character c to stdout
 *   * @c: The character to print
 *    *
 *     * Return: On success 1.
 *      * On error, -1 is returned, and errno is set appropriately.
 *       */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

